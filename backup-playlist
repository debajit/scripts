#!/usr/bin/env bash

#
# backup-playlist - backup a CMUS playlist to the cloud
#
# SYNOPSIS
#   backup-playlist CMUS-PLAYLIST_NAME
#
# DESCRIPTION
#   Converts a CMUS playlist to m3u, replaces all absolute paths with
#   relative ones, and uploads it to Box and Mega.
#
#   If you store this generated m3u playlist at the root of your music
#   collection in Box or another cloud storage, then you can directly
#   import this m3u playlist to quickly load all its songs, on your
#   phone, for instance, using something like CloudBeats.
#
#   The script Can be run from any directory.
#
# EXAMPLES
#   backup-playlist Octane
#   backup-playlist Mellow
#

set -euo pipefail

source "notification.sh"

# REMOTES=(tulip box mega)
REMOTES=(box)
SOURCE_PLAYLIST_DIRECTORY="${HOME}/.config/cmus/playlists"
TARGET_PLAYLIST_DIRECTORY="${HOME}/Archive/Music"

SOURCE_PLAYLIST_NAME="$1"
TARGET_PLAYLIST_NAME="${SOURCE_PLAYLIST_NAME}.m3u"
SOURCE_PLAYLIST_FILENAME="${SOURCE_PLAYLIST_DIRECTORY}/${SOURCE_PLAYLIST_NAME}"
TARGET_PLAYLIST_FILENAME="${TARGET_PLAYLIST_DIRECTORY}/${TARGET_PLAYLIST_NAME}"

#-----------------------------------------------------------
# Validate source cmus playlist
#-----------------------------------------------------------

echo_notify "Checking if we can read the CMUS playlist “${SOURCE_PLAYLIST_FILENAME}” …"
[[ -r "${SOURCE_PLAYLIST_FILENAME}" ]] || die "Cannot read CMUS playlist “${SOURCE_PLAYLIST_FILENAME}”"

#-----------------------------------------------------------
# Prepare to write target m3u playlist
#-----------------------------------------------------------

echo_notify "Checking if the annexed m3u playlist “${TARGET_PLAYLIST_FILENAME}” exists …"
pushd "${TARGET_PLAYLIST_DIRECTORY}" &> /dev/null # We need to be in the target playlist directory to run git annex commands
if [[ -h "${TARGET_PLAYLIST_FILENAME}" ]]; then
  echo_notify "Unlocking annexed playlist for edits…"
  git annex unlock "${TARGET_PLAYLIST_FILENAME}" || die "Failed to git-annex unlock playlist"
else
  # At this point the playlist either does not exist or exists and is writable
  echo_notify "Can write m3u playlist ${TARGET_PLAYLIST_FILENAME}"
fi

#-----------------------------------------------------------
# Write target playlist
#-----------------------------------------------------------

echo_notify 'Replacing absolute links with relative ones...'
sed 's|/home/debajit/Archive/Music|.|; s|/home/debajit/MusicOnExternalDrive|.|; s|/run/media/debajit/Boho 2TB/Debajit/Music/iTunes/iTunes Media/Music|.|' "${SOURCE_PLAYLIST_FILENAME}" > "${TARGET_PLAYLIST_FILENAME}"
if [[ $? -eq 0 ]]; then
  echo_notify "Successfully wrote playlist “${TARGET_PLAYLIST_NAME}”"
else
  die "Failed to write playlist ${TARGET_PLAYLIST_NAME}"
fi

#---------------------------------------------------------------------
# Copy m3u playlist to add given rclone remotes (these are not the
# git-annex remotes)
#---------------------------------------------------------------------

for remote in ${REMOTES[*]}; do
  echo_notify "Backing up to ${remote}..."
  rclone -P copy "${TARGET_PLAYLIST_FILENAME}" "${remote}:Debajit/Music/"
done

#-----------------------------------------------------------
# Git annex the updated m3u playlist
#-----------------------------------------------------------

set -x
echo_notify "Git-annexing playlist…"
echo $(pwd)
git annex add "${TARGET_PLAYLIST_NAME}" &&
  git annex lock "${TARGET_PLAYLIST_NAME}" &&
  git commit -m "Updated playlist ${TARGET_PLAYLIST_NAME}" &&
  git annex copy --to b2 "${TARGET_PLAYLIST_FILENAME}" &&
  git annex sync

popd
